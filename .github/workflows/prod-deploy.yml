name: Deploy to Production Server

on:
  push:
    branches:
      - master

jobs:
  set:
    environment: Deploy-Prod
    runs-on: ubuntu-latest
    outputs:
      TIMESTAMP: ${{ steps.set_timestamp.outputs.TIMESTAMP }}

    steps:
      - name: 🕒 Set Timestamp
        id: set_timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  build:
    environment: Deploy-Prod
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v3
      - name: 🏗️ Setup JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: 🎖️ Grant Execute Permission
        run: chmod +x gradlew
      - name: ⚙️ Create application-prod.yml
        run: |
          touch ./src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./src/main/resources/application-prod.yml
        shell: bash
      - name: 🔨 Build Gradle
        run: ./gradlew build --no-daemon
      - name: 🪂 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/libs/onTODO-server-0.0.1-SNAPSHOT.jar
          retention-days: 1

  push:
    needs:
      - build
      - set
    runs-on: ubuntu-latest
    environment: Deploy-Prod

    steps:
      - name: 📥 Load Outputs
        run: echo "TIMESTAMP=${{ needs.set.outputs.TIMESTAMP }}" >> $GITHUB_ENV
      - name: 🏷️ Set Docker Image Name
        run: echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/ontodo-server" >> $GITHUB_ENV
      - name: 📂 Checkout Repository
        uses: actions/checkout@v3
      - name: 📦 Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: build/libs
      - name: 🐋 Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: 📦 Build Docker Image
        run: docker build -t ${IMAGE_NAME}:latest -t ${IMAGE_NAME}:${TIMESTAMP} .
      - name: 🚀 Push Docker Image
        run: |
          docker push ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:${TIMESTAMP}

  deploy:
    needs: push
    runs-on: ubuntu-latest
    environment: Deploy-Prod

    steps:
      - name: 🏷️ Set Docker Image Name
        run: echo "IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/ontodo-server" >> $GITHUB_ENV
      - name: 🎁 Set Docker Container Name
        run: echo "CONTAINER_NAME=onTODO-server" >> $GITHUB_ENV
      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-agent bash -c "ssh-add ~/.ssh/id_rsa"
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: 🚀 Deploy to Production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            set -e
            echo "🛑 Stop and Remove Existing Container"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
          
            echo "📥 Pull Latest Image"
            docker pull ${IMAGE_NAME}:latest
          
            echo "🚀 Run New Container"
            docker run -d --name $CONTAINER_NAME -p 8080:12222 ${IMAGE_NAME}:latest
            echo "🧹 Cleaning up old images"
            docker system prune -af
            exit 0
          EOF